#
# impport required modules into the script
from http.cookiejar import MozillaCookieJar
import requests
import os
import getpass
import json
import yaml
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# define the current working directory with the os module
cwd = os.getcwd()

# prompt the user for credentials and store into the variables
username = input("Enter your username:\n")
password = getpass.getpass("Enter your password:\n")



# api requests function
def main():

    # open the hosts.yml file generated by the create_dynamic_invetory.py script
    with open (os.path.join(cwd , 'hosts.yml') , 'r') as f:
        hosts_data = yaml.safe_load(f)

        # define the switches to be targeted using the hosts.yml file
        switches = hosts_data['MAIN']['hosts'].keys()

        # loop through each switch in the hosts.yml file
        for switch_ip in switches:
            
            # create a unique cookie file for each switch IP address
            cookie_file = os.path.join(cwd , 'cookies' , f'{switch_ip}_tmp_cookie_file')

            # create a unique log file for each switch IP address
            with open (os.path.join(cwd , 'logs' , f'{switch_ip}.logs') , 'w') as log_file:

                # delete the cookie file if it exists
                if os.path.exists(cookie_file):
                    os.remove(cookie_file)

                # create a new cookie file
                cookies = MozillaCookieJar(cookie_file)

                # define empty headers
                headers = {}

                # "files" is used in the API requests as credentials
                files = {
                    'username': (None, username),
                    'password': (None, password),
                }

                # use the same session for all requests
                with requests.Session() as session:
                    session.cookies = cookies

                    # login to the switch and save the cookie for future requests
                    try:
                        response = session.post(f'https://{switch_ip}/rest/v1/login', headers=headers, files=files, verify=False)
                    except:
                        # write failure to log file
                        log_file.write(f'LOGIN FAILED on {switch_ip}')

                    # save cookie and write to log file if login was successful
                    cookies.save(cookie_file, ignore_discard=True, ignore_expires=True)
                    log_file.write(f'The LOGIN status code is: {response.status_code}\n')

                    # find the vlans on the device
                    try:
                        response = session.get(f'https://{switch_ip}/rest/v10.10/system/vlans', headers=headers, verify=False)
                    except:
                        # write failure to log file
                        log_file.write(f"GET_VLAN FAILED on {switch_ip}")

                    # write code and output if successful
                    log_file.write(f'\nThe GET_VLAN status code is: {response.status_code}\n')
                    vlan_response_text = response.text.strip()
                    log_file.write(f'The GET_VLAN output is: {vlan_response_text}\n')

                    response_json = json.loads(vlan_response_text)

                    # loop through the vlans that the previous API request found on the device
                    for vlan,info in response_json.items():
                        
                        # exclude vlan 1 from subsequent steps
                        if int(vlan) != 1:
                            log_file.write(f"\nVLAN {vlan}\n")

                            try:
                                response = session.get(f'https://{switch_ip}/rest/v10.10/system/vlans/{vlan}', headers=headers, verify=False)
                            except:
                                # write failure to log file
                                log_file.write(f'GET_VLAN_INFO FAILED on {switch_ip}')
                            
                            # write code output to log file
                            log_file.write(f'The GET_VLAN_INFO status code is: {response.status_code}\n')
                            
                            response = response.json()
                            
                            # filter out vlan 1 again
                            if response.get("id") != 1:

                                # check if client track ip is enabled
                                if response.get("client_ip_track_enable") == False:

                                    log_file.write(f"Client track ip is being configured on vlan {vlan}\n")

                                    # define new headers for API request
                                    headers = {
                                            'accept': '*/*',
                                            'Content-Type': 'application/json',
                                            'x-csrf-token': 'token'
                                    }

                                    # set data flag of client_track_ip_enable to True
                                    data = {
                                        'client_ip_track_enable': True
                                    }

                                    try:
                                        response = session.patch(f"https://{switch_ip}/rest/v10.04/system/vlans/{vlan}", headers=headers, data=json.dumps(data) , verify=False)
                                        log_file.write(f'vlan {vlan} succeeded with code {response.status_code}\n')

                                    except: 
                                        # write failure to log file
                                        log_file.write(f'FALIED to enable client track ip on {switch_ip}, vlan {vlan}\n')

                                else:
                                    # skip this vlan and write to log if vlan already has client track ip enabled
                                    log_file.write(f'SKIPPING vlan {vlan}. Client track IP is enabled on vlan {vlan}\n')

            ####################################

                    # log out of this session
                    try:
                        response = session.post(f'https://{switch_ip}/rest/v10.04/logout', headers=headers, verify=False)
                    except:
                        # write failure to log file
                        log_file.write(f'LOGOUT FAILED on {switch_ip}')
                        
                    log_file.write(f'\nThe LOGOUT status code is: {response.status_code}\n')



if __name__ == "__main__":
    main ()